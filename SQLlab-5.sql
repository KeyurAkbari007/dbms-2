CREATE DATABASE Person_Info;
	
--1. Create INSERT, UPDATE & DELETE Stored Procedures for Person table.
	----------INSERT_PROCEDURE----------
	ALTER PROCEDURE PR_INSERT
	@PERSONID		INT,
	@PERSONNAME		VARCHAR(50),
	@SALARY			DECIMAL(8,2),
	@JOININGDATE	DATETIME,
	@CITY			VARCHAR(100),
	@AGE			INT,
	@BIRTHDATE		DATETIME
	AS
	BEGIN
	INSERT INTO Person(
		PERSONID,	
		PERSONNAME,	
		SALARY,		
		JOININGDATE,
		CITY,		
		AGE,	
		BIRTHDATE	
		)
	VALUES(@PERSONID,@PERSONNAME,@SALARY,@JOININGDATE,@CITY,@AGE,@BIRTHDATE)
	END

	INSERT INTO PERSON VALUES(101,'Deep',50000,'2022-07-01','Rajkot',18,'2004-04-17')
	INSERT INTO PERSON VALUES(102,'Raj',40000,'2021-08-17','Morbi',18,'2004-04-17')
	INSERT INTO PERSON VALUES(103,'Pratik',18000,'2002-10-16','Rajkot',18,'2004-04-17')
	INSERT INTO PERSON VALUES(104,'Parh',34000,'2012-01-01','Surat',18,'2004-04-17')
	SELECT * FROM PERSON
		   		
	----------UPDATE_PROCEDURE----------  		
	CREATE PROCEDURE PR_UPDATE
	@PERSONID		INT,
	@PERSONNAME		VARCHAR(50),
	@SALARY			DECIMAL(8,2),
	@JOININGDATE	DATETIME,
	@CITY			VARCHAR(100),
	@AGE			INT,
	@BIRTHDATE		DATETIME
	AS
	BEGIN
	UPDATE PERSON
	SET
		PERSONNAME		=@PERSONNAME,
		SALARY			=@SALARY,
		JOININGDATE		=@JOININGDATE,
		CITY			=@CITY,
		AGE				=@AGE,
		BIRTHDATE		=@BIRTHDATE
	WHERE PERSONID=@PERSONID
	END

	UPDATE PERSON SET PERSONNAME='PRIYA'
	WHERE PERSONID=104
	SELECT * FROM PERSON

	----------DELETE_PROCEDURE----------
	CREATE PROCEDURE PR_DELETE
	@PERSONID		INT
	AS
	BEGIN
	DELETE FROM PERSON 
	WHERE PERSONID=@PERSONID
	END

	DELETE FROM PERSON
	WHERE PERSONID=104
	SELECT * FROM PERSON

--2. Create a trigger that fires on INSERT, UPDATE and DELETE operation on the Person table. For that, 
	--create a new table PersonLog to log (enter) all operations performed on the Person table.\
	----------INSERT_TRIGGER----------
	CREATE TRIGGER TR_INSERT
	ON PERSON
	FOR INSERT
	AS
	BEGIN
			DECLARE @PERSONID INT	
			DECLARE @PERSONNAME	VARCHAR(50)
			SELECT @PERSONID = PERSONID FROM inserted
			SELECT @PERSONNAME = PERSONNAME FROM inserted
			INSERT INTO PERSONLOG
			VALUES
			(@PERSONID,@PERSONNAME,'Insert',CAST(GETDATE() AS VARCHAR(50)))
	END

	INSERT INTO PERSON VALUES(104,'Parh',34000,'2012-01-01','Surat',18,'2004-04-17')
	SELECT * FROM PERSONLOG

	----------UPDATE_TRIGGER----------
	CREATE TRIGGER TR_UPDATE
	ON PERSON
	FOR UPDATE
	AS
	BEGIN
			DECLARE @PERSONID INT	
			DECLARE @PERSONNAME	VARCHAR(50)
			SELECT @PERSONID = PERSONID FROM inserted
			SELECT @PERSONNAME = PERSONNAME FROM inserted
			INSERT INTO PERSONLOG
			VALUES
			(@PERSONID,@PERSONNAME,'Update',CAST(GETDATE() AS VARCHAR(50)))
	END

	UPDATE PERSON SET PERSONNAME='Parth'
	WHERE PERSONID=104
	SELECT * FROM PERSONLOG

	----------DELETE_TRIGGER----------
	ALTER TRIGGER TR_DELETE
	ON PERSON
	FOR DELETE
	AS
	BEGIN
			DECLARE @PERSONID INT	
			DECLARE @PERSONNAME	VARCHAR(50)
			SELECT @PERSONID = PERSONID FROM deleted
			SELECT @PERSONNAME = PERSONNAME FROM deleted
			INSERT INTO PERSONLOG
			VALUES
			(@PERSONID,@PERSONNAME,'Dleted',CAST(GETDATE() AS VARCHAR(50)))
	END

	DELETE FROM PERSON
	WHERE PERSONID=102
	SELECT * FROM PERSONLOG

--3. Create an INSTEAD OF trigger that fires on INSERT, UPDATE and DELETE operation on the Person
	--table. For that, log all operation performed on the Person table into PersonLog.
	----------INSERT_TRIGGER----------
	CREATE TRIGGER TR_INOF_INSERT
	ON PERSON
	INSTEAD OF INSERT
	AS
	BEGIN
			DECLARE @PERSONID INT	
			DECLARE @PERSONNAME	VARCHAR(50)
			SELECT @PERSONID = PERSONID FROM inserted
			SELECT @PERSONNAME = PERSONNAME FROM inserted
			INSERT INTO PERSONLOG
			VALUES
			(@PERSONID,@PERSONNAME,'Insert',CAST(GETDATE() AS VARCHAR(50)))
	END

	INSERT INTO PERSON VALUES(104,'Parh',34000,'2012-01-01','Surat',18,'2004-04-17')
	SELECT * FROM PERSONLOG
	SELECT * FROM PERSON
	----------UPDATE_TRIGGER----------
	CREATE TRIGGER TR_INOF_UPDATE
	ON PERSON
	INSTEAD OF UPDATE
	AS
	BEGIN
			DECLARE @PERSONID INT	
			DECLARE @PERSONNAME	VARCHAR(50)
			SELECT @PERSONID = PERSONID FROM inserted
			SELECT @PERSONNAME = PERSONNAME FROM inserted
			INSERT INTO PERSONLOG
			VALUES
			(@PERSONID,@PERSONNAME,'Update',CAST(GETDATE() AS VARCHAR(50)))
	END

	UPDATE PERSON SET PERSONNAME='Priya'
	WHERE PERSONID=104
	SELECT * FROM PERSONLOG

	----------DELETE_TRIGGER----------
	CREATE TRIGGER TR_INOF_DELETE
	ON PERSON
	INSTEAD OF DELETE
	AS
	BEGIN
			DECLARE @PERSONID INT	
			DECLARE @PERSONNAME	VARCHAR(50)
			SELECT @PERSONID = PERSONID FROM deleted
			SELECT @PERSONNAME = PERSONNAME FROM deleted
			INSERT INTO PERSONLOG
			VALUES
			(@PERSONID,@PERSONNAME,'Dleted',CAST(GETDATE() AS VARCHAR(50)))
	END

	DELETE FROM PERSON
	WHERE PERSONID=102
	SELECT * FROM PERSONLOG

--4. Create DELETE trigger on PersonLog table, when we delete any record of PersonLog table it prints 
	--‘Record deleted successfully from PersonLog’.
	CREATE TRIGGER TR_PERSONLOG_DELETE
	ON PERSONLOG
	FOR DELETE 
	AS
	BEGIN
		DECLARE @PERSONID INT
		SELECT @PERSONID=PERSONID FROM deleted
		PRINT 'Record deleted successfully from PersonLog'
	END

	DELETE FROM PERSONLOG
	WHERE PERSONID=104
	SELECT * FROM PERSONLOG

--5. Create INSERT trigger on person table, which calculates the age and update that age in Person 
	--table.
	SELECT * FROM Person
	SELECT * FROM PersonLog

	ALTER TRIGGER UPDATE_AGE
	ON PERSON
	FOR INSERT
	AS
	BEGIN
		DECLARE @PERSONID INT
		DECLARE @AGE INT
		DECLARE @PERSONNAME VARCHAR(50)
		SELECT @PERSONID=PERSONID FROM inserted
		SELECT @PERSONNAME=PERSONNAME FROM inserted
		SELECT @AGE =DATEDIFF(YEAR,BIRTHDATE,GETDATE())FROM inserted
		UPDATE PERSON SET AGE=@AGE
		WHERE PERSONID=@PERSONID
		INSERT INTO PERSONLOG
			VALUES
			(@PERSONID,@PERSONNAME,'Insert',CAST(GETDATE() AS VARCHAR(50)))
		END

	INSERT INTO PERSON VALUES(105,'XYZ',18000,'1909-10-04','RAJKOT',18,'1999-01-01')